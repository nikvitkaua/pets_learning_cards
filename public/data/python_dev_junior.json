{
    "1": {
        "question": "Що таке інженерія і процес розробки загалом?",
        "answer": "Інженерія - це застосування наукових і математичних принципів для проектування та створення систем. Процес розробки включає аналіз, проектування, реалізацію, тестування та підтримку програмного забезпечення."
    },
    "2": {
        "question": "Які знаєте принципи програмування?",
        "answer": "До основних принципів програмування належать DRY (Don't Repeat Yourself), KISS (Keep It Simple, Stupid), SOLID, YAGNI (You Ain't Gonna Need It), принцип єдиної відповідальності тощо."
    },
    "3": {
        "question": "Чим відрізняються процедурна та об’єкто-орієнтована парадигми програмування?",
        "answer": "Процедурне програмування використовує функції та процедури, тоді як об’єктно-орієнтоване програмування (ООП) використовує класи та об'єкти для структурування коду. ООП дозволяє інкапсуляцію, наслідування і поліморфізм."
    },
    "4": {
        "question": "Які основні принципи ООП (наслідування, інкапсуляція, поліморфізм)?",
        "answer": "Інкапсуляція – приховування деталей реалізації; Наслідування – можливість одного класу успадковувати властивості іншого; Поліморфізм – можливість використовувати один інтерфейс для різних типів об'єктів."
    },
    "5": {
        "question": "Що таке множинне наслідування?",
        "answer": "Множинне наслідування - це можливість класу успадковувати властивості та методи від декількох батьківських класів одночасно. В Python це реалізовано через MRO (Method Resolution Order)."
    },
    "6": {
        "question": "Які є шість етапів розробки продукту в Software Development lifecycle і яка різниця між Agile і Kanban?",
        "answer": "Шість етапів: планування, аналіз вимог, дизайн, розробка, тестування, підтримка. Agile - гнучка методологія, орієнтована на ітерації, тоді як Kanban фокусується на візуалізації завдань і мінімізації простою."
    },
    "7": {
        "question": "Які є методи HTTP-запитів та яка між ними різниця?",
        "answer": "Основні методи: GET (отримання даних), POST (створення), PUT (оновлення), DELETE (видалення). Кожен з них використовується для відповідних операцій над ресурсами."
    },
    "8": {
        "question": "Як виглядають HTTP-request/response?",
        "answer": "HTTP-запит складається з методу, заголовків та тіла. Відповідь містить статусний код, заголовки та тіло з даними або помилкою."
    },
    "9": {
        "question": "Що таке авторизація і як вона працює?",
        "answer": "Авторизація - це процес перевірки прав доступу користувача до ресурсів після автентифікації. Реалізується через JWT, OAuth, session-based auth тощо."
    },
    "10": {
        "question": "Що таке cookies?",
        "answer": "Cookies - це невеликі текстові файли, що зберігаються у браузері користувача та використовуються для збереження сесій, автентифікації тощо."
    },
    "11": {
        "question": "Що таке вебвразливість?",
        "answer": "Вебвразливість – це слабке місце у веб-додатку, яке може бути використане зловмисниками для отримання несанкціонованого доступу або порушення безпеки."
    },
    "12": {
        "question": "Які знаєте класичні бази даних?",
        "answer": "До класичних баз даних належать MySQL, PostgreSQL, SQLite, Oracle, Microsoft SQL Server. Вони використовують реляційну модель даних."
    },
    "13": {
        "question": "Як читати специфікацію в конкретній мові (наприклад, PEP8 у Python)?",
        "answer": "Специфікації, як PEP8 у Python, містять рекомендації щодо стилю коду. Їх варто читати на офіційних ресурсах та використовувати лінтери (наприклад, flake8, black) для перевірки."
    },
    "14": {
        "question": "Як відбувається взаємодія клієнта і сервера?",
        "answer": "Клієнт відправляє HTTP-запит до сервера, сервер обробляє запит і повертає відповідь, яка містить дані або код помилки."
    },
    "15": {
        "question": "Які є підходи до проєктування API?",
        "answer": "Основні підходи: REST, GraphQL, gRPC. REST заснований на ресурсах та HTTP-методах, GraphQL дозволяє отримувати тільки необхідні дані, а gRPC використовує бінарні протоколи для швидкої взаємодії."
    },
    "16": {
        "question": "Як використовувати патерни програмування?",
        "answer": "Патерни програмування – це перевірені рішення типових задач. Наприклад, Factory Pattern створює об'єкти без вказівки конкретного класу, а Singleton забезпечує існування лише одного екземпляра класу."
    },
    "17": {
        "question": "Що таке Acceptance Testing і навіщо його використовують?",
        "answer": "Acceptance Testing – це тестування, яке перевіряє відповідність ПЗ бізнес-вимогам. Воно гарантує, що продукт задовольняє потреби кінцевих користувачів."
    },
    "18": {
        "question": "Що таке модульні та інтеграційні тести, API-тести?",
        "answer": "Модульні тести перевіряють окремі функції, інтеграційні – взаємодію між модулями, API-тести перевіряють роботу API-запитів."
    },
    "19": {
        "question": "Як писати unit-тести?",
        "answer": "Unit-тести пишуться для окремих функцій або класів. У Python використовуються бібліотеки unittest або pytest."
    },
    "20": {
        "question": "Які є best practices у написанні автотестів?",
        "answer": "Кращі практики: ізоляція тестів, використання mocks, забезпечення читабельності та простоти тестів."
    },
    "21": {
        "question": "Які базові команди системи контролю версій?",
        "answer": "git init, git clone, git add, git commit, git push, git pull, git merge, git branch."
    },
    "22": {
        "question": "Як використовувати Git?",
        "answer": "Git використовується для управління версіями коду, створення гілок, відстеження змін і злиття коду."
    },
    "23": {
        "question": "У чому різниця між хешуванням і шифруванням?",
        "answer": "Хешування – це односторонній процес перетворення даних, шифрування – двосторонній, що дозволяє відновити дані."
    },
    "24": {
        "question": "Python — мова, що інтерпретується чи компілюється?",
        "answer": "Python є інтерпретованою мовою, оскільки його код виконується рядок за рядком за допомогою інтерпретатора. Проте, він використовує байт-код, що робить його частково компільованим."
    },
    "25": {
        "question": "Які є змінні та незмінні типи даних?",
        "answer": "Змінні типи: списки (list), словники (dict), множини (set). Незмінні: рядки (str), числа (int, float), кортежі (tuple)."
    },
    "26": {
        "question": "Що таке область видимості змінних?",
        "answer": "Область видимості визначає, де змінна доступна у коді. Є локальна, глобальна, нелокальна (nonlocal) і вбудована область видимості."
    },
    "27": {
        "question": "Що таке introspection?",
        "answer": "Introspection – це механізм аналізу об'єктів під час виконання програми, що дозволяє отримувати інформацію про їх атрибути, методи, типи тощо."
    },
    "28": {
        "question": "Різниця між is і ==?",
        "answer": "is порівнює об'єкти за адресою в пам'яті, а == перевіряє рівність їх значень."
    },
    "29": {
        "question": "Різниця між __init__() і __new__()?",
        "answer": "__new__() створює об'єкт, а __init__() ініціалізує його атрибути."
    },
    "30": {
        "question": "У чому різниця між потоками та процесами?",
        "answer": "Процеси мають власну пам'ять, а потоки розділяють пам'ять всередині одного процесу. Потоки легші, але процеси більш ізольовані."
    },
    "31": {
        "question": "Які є види імпорту?",
        "answer": "Є стандартний імпорт (import module), імпорт окремих елементів (from module import func), імпорт усіх елементів (*), імпорт з перейменуванням (import module as alias)."
    },
    "32": {
        "question": "Що таке клас, ітератор, генератор?",
        "answer": "Клас – це шаблон для створення об'єктів. Ітератор – об'єкт, що реалізує методи __iter__() та __next__(). Генератор – це функція з yield, що повертає значення поступово."
    },
    "33": {
        "question": "Що таке метаклас, змінна циклу?",
        "answer": "Метаклас – це клас, який визначає поведінку інших класів. Змінна циклу – змінна, що приймає значення ітерації в циклі for."
    },
    "34": {
        "question": "У чому різниця між ітераторами та генераторами?",
        "answer": "Генератори – це підвид ітераторів, які використовують yield та зберігають стан між викликами, тоді як ітератори реалізують __iter__() та __next__() вручну."
    },
    "35": {
        "question": "У чому різниця між staticmethod та classmethod?",
        "answer": "staticmethod не отримує доступ до класу, а classmethod отримує клас як перший аргумент і може змінювати його стан."
    },
    "36": {
        "question": "Як працюють декоратори, контекстні менеджери?",
        "answer": "Декоратори модифікують поведінку функцій, а контекстні менеджери використовуються для управління ресурсами (наприклад, with open())."
    },
    "37": {
        "question": "Як працюють dict comprehension, list comprehension і set comprehension?",
        "answer": "Вони дозволяють створювати словники, списки та множини в компактному синтаксисі: {k: v for k, v in iterable}, [x for x in iterable], {x for x in iterable}."
    },
    "38": {
        "question": "Чи можна використовувати кілька декораторів для однієї функції?",
        "answer": "Так, можна застосовувати кілька декораторів, накладаючи їх один за одним у порядку зверху вниз."
    },
    "39": {
        "question": "Чи можна створити декоратор з класу?",
        "answer": "Так, декоратори можуть бути реалізовані як класи, що визначають метод __call__()."
    },
    "40": {
        "question": "Які є основні популярні пакети (requests, pytest, etc)?",
        "answer": "До популярних пакетів належать requests (робота з HTTP-запитами), pytest (тестування), numpy (числові обчислення), pandas (аналіз даних) тощо."
    },
    "41": {
        "question": "Що таке lambda-функції?",
        "answer": "lambda-функції – це анонімні функції, що записуються у вигляді lambda аргументи: вираз."
    },
    "42": {
        "question": "Що означає *args, **kwargs та як вони використовуються?",
        "answer": "*args приймає довільну кількість позиційних аргументів, **kwargs – довільну кількість іменованих аргументів."
    },
    "43": {
        "question": "Що таке exceptions, <try-except>?",
        "answer": "Exceptions – це помилки під час виконання програми. try-except використовується для їх обробки."
    },
    "44": {
        "question": "Що таке PEP (Python Enhancement Proposal), які з них знаєте (PEP 8, PEP 484)?",
        "answer": "PEP – це документ, що описує покращення у Python. PEP 8 – стиль кодування, PEP 484 – анотація типів."
    },
    "45": {
        "question": "Напишіть hello-world сервіс, використовуючи один із фреймворків.",
        "answer": "Приклад на Flask: from flask import Flask; app = Flask(__name__); @app.route('/') def hello(): return 'Hello, World!'; app.run()"
    },
    "46": {
        "question": "Які є типи даних і яка різниця між list і tuple, навіщо вони?",
        "answer": "list – змінний, tuple – незмінний. tuple використовується для зберігання незмінних даних."
    },
    "47": {
        "question": "Як використовувати вбудовані колекції (list, set, dictionary)?",
        "answer": "list – для впорядкованих даних, set – для унікальних значень, dict – для пар ключ-значення."
    },
    "48": {
        "question": "У чому полягає складність доступу до елементів dict?",
        "answer": "dict використовує хеш-таблицю, тому доступ швидкий (O(1)), але витрачає більше пам'яті."
    },
    "49": {
        "question": "Як створюється об’єкт в Python, для чого __new__, навіщо __init__?",
        "answer": "__new__ створює об'єкт, __init__ ініціалізує його. __new__ використовується для створення класів Singleton."
    },
    "50": {
        "question": "Що знаєте з модуля collections, якими ще built-in модулями користувались?",
        "answer": "collections містить OrderedDict, defaultdict, Counter. Також популярні os, sys, itertools, functools."
    },
    "51": {
        "question": "Що таке шаблонізатор та як у ньому виконувати базові операції (об’єднувати ділянки шаблона, виводити дату, виводити дані з серверного боку)?",
        "answer": "Шаблонізатор (наприклад, Jinja2) дозволяє вставляти змінні, використовувати фільтри, умовні оператори у HTML."
    },
    "52": {
        "question": "Як Python працює з HTTP-сервером?",
        "answer": "За допомогою бібліотек Flask, FastAPI або модуля http.server. Вони слухають запити і повертають відповіді."
    },
    "53": {
        "question": "Що відбувається, коли створюється віртуальне середовище?",
        "answer": "Створюється ізольоване середовище з власними бібліотеками, щоб не конфліктувати з глобальними."
    },
    "54": {
        "question": "Які є базові методи роботи з SQL- базою даних у Python?",
        "answer": "Основні методи: execute(), fetchone(), fetchall(). Використовуються у модулях sqlite3, psycopg2, SQLAlchemy."
    },
    "55": {
        "question": "Що таке SQL-транзакція?",
        "answer": "Група SQL-запитів, яка виконується як єдине ціле. Використовуються команди BEGIN, COMMIT, ROLLBACK."
    },
    "56": {
        "question": "Як зробити вибірку із SQL-бази з простою агрегацією?",
        "answer": "SELECT COUNT(*), SUM(column), AVG(column) FROM table GROUP BY column;"
    },
    "57": {
        "question": "Який вигляд має запит, який виконує JOIN між таблицями й до самих себе?",
        "answer": "SELECT a.id, b.id FROM table_name a JOIN table_name b ON a.ref_id = b.id;"
    },
    "58": {
        "question": "Як відправляти запити у SQL-базу даних без ORM?",
        "answer": "За допомогою бібліотек sqlite3, psycopg2, pymysql. Використовується метод execute() об'єкта cursor."
    },
    "59": {
        "question": "Що таке алгоритми (наприклад, Big-O notation)?",
        "answer": "Алгоритм – це набір інструкцій для виконання задачі. Big-O позначає складність алгоритму в найгіршому випадку."
    },
    "60": {
        "question": "Які є базові алгоритми сортування?",
        "answer": "Bubble Sort, Quick Sort, Merge Sort, Insertion Sort, Selection Sort."
    },
    "61": {
        "question": "Що таке Bubble Sort і як це працює?",
        "answer": "Bubble Sort порівнює сусідні елементи і міняє їх місцями, якщо вони у невірному порядку. Повторюється до завершення сортування."
    },
    "62": {
        "question": "Що таке лінійна складність сортування?",
        "answer": "Це алгоритми, які виконують обробку за O(n) або O(n log n), наприклад, Merge Sort, Quick Sort."
    }
}
